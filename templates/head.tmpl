{{ define "head" -}}
package reflector

import (
	"context"
	"encoding/json"
	"fmt"
	"sync"

	"google.golang.org/grpc"

	pb "{{ .Package }}"
)

var (
	_connections = make(map[string]*grpc.ClientConn)
	_lock        sync.RWMutex
	_ctx         context.Context
	_emit        func(ctx context.Context, name string, data ...any)
	_dial        func(ctx context.Context, target string) (conn *grpc.ClientConn, err error)
)

// getClientConn returns a connection to the given address.
// should be called with _lock held.
func getClientConn(addr string) (*grpc.ClientConn, error) {
	cc, ok := _connections[addr]
	if !ok {
		return nil, fmt.Errorf("gRPC connection with address %s not found", addr)
	}

	return cc, nil
}

// jsonRemarshal is a hack to hide gRPC types from Wails
func jsonRemarshal(in, out any) {
	x, _ := json.Marshal(in)
	_ = json.Unmarshal(x, out)
}

func Init(
	ctx context.Context,
	emit func(ctx context.Context, name string, data ...any),
	dial func(ctx context.Context, target string) (conn *grpc.ClientConn, err error),
) {
	_ctx = ctx
	_emit = emit
	_dial = dial
}

type GRPC struct{}

func (GRPC) Connect(addr string) error {
	_lock.Lock()
	defer _lock.Unlock()

	if _ctx == nil {
		return fmt.Errorf("gRPC context is not set")
	}

	if conn, ok := _connections[addr]; ok {
		conn.Close()
		delete(_connections, addr)
	}

	cc, err := _dial(_ctx, addr)
	if err != nil {
		return err
	}

	_connections[addr] = cc

	return nil
}

func (GRPC) Disconnect(addr string) error {
	_lock.Lock()
	defer _lock.Unlock()

	if conn, ok := _connections[addr]; ok {
		conn.Close()
		delete(_connections, addr)
	}

	return nil
}

{{ end }}
