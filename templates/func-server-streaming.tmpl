{{ define "func-server-streaming" -}}
func ({{ .ObjectName }}) loop_{{ .MethodName }}(addr string, stream pb.{{ .ResponseType }}) {
	for {
		event, err := stream.Recv()
		if err != nil {
			_emit(_ctx, "{{ .ObjectName }}_{{ .MethodName }}_close", addr, err.Error())
			return
		}

		_emit(_ctx, "{{ .ObjectName }}_{{ .MethodName }}", addr, event)
	}
}

func (s *{{ .ObjectName }}) {{ .MethodName }}(
	addr string,
{{- if .HasRequest }}
	in any,
{{- end }}
) error {
	_lock.RLock()
	defer _lock.RUnlock()

	var req pb.{{ .RequestType }}

	cc, err := getClientConn(addr)
	if err != nil {
		return err
	}

{{- if .HasRequest }}

	jsonRemarshal(in, &req)
{{- end }}

	client := pb.New{{ .ObjectName }}(cc)

	stream, err := client.{{ .MethodName }}(_ctx, &req)
	if err != nil {
		return err
	}

	go s.loop_{{ .MethodName }}(addr, stream)

	return nil
}

{{ end }}
